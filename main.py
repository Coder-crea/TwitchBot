import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import os
from dotenv import load_dotenv
from dop_functions import get_twitch_token, get_streamer_info, get_stream_info, format_twitch_date, get_last_vod #,download_vod
from data_base import save_user_to_db
load_dotenv()

TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not all([TWITCH_CLIENT_ID, TWITCH_CLIENT_SECRET, TELEGRAM_BOT_TOKEN]):
    raise Exception("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ!")


# –ü–æ–ª—É—á–∞–µ–º Twitch —Ç–æ–∫–µ–Ω
try:
    TWITCH_ACCESS_TOKEN = get_twitch_token(TWITCH_CLIENT_ID=TWITCH_CLIENT_ID, TWITCH_CLIENT_SECRET=TWITCH_CLIENT_SECRET)
    print("Twitch access token –ø–æ–ª—É—á–µ–Ω")
except Exception as e:
    print(e)
    exit()



#–°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
popular_streamers = ["Buster", "Evelone2004", "Anar Abdullaev", "Enzzai", "Whylollycry", "StRoGo"]


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = message.from_user
    save_user_to_db(user)
    markup = ReplyKeyboardMarkup(row_width=6)
    for streamer in popular_streamers:
        button = KeyboardButton(streamer)
        markup.add(button)
    bot.reply_to(message, """
üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Twitch Analytics Bot!</b>
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ Twitch:
üìå –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏–º—è —Å—Ç—Ä–∏–º–µ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
   <code>Evelone2004</code>
    """, parse_mode='HTML', reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è VOD
# @bot.message_handler(commands=['download'])
# def download_vod_command(message):
#     try:
#         vod_id = message.text.split()[1]
#     except IndexError:
#         bot.reply_to(message, "UsageId: /download 123456789")
#         return
#
#     bot.send_message(message.chat.id, "‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É VOD... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.")
#
#     video_path = f"vod_{vod_id}.mp4"
#     downloaded_file = download_vod(vod_id, video_path)
#
#     if downloaded_file and os.path.exists(downloaded_file):
#         # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–º–µ—Ä
#         file_size = os.path.getsize(downloaded_file)
#         try:
#             with open(downloaded_file, 'rb') as f:
#                 if file_size > 50 * 1024 * 1024:
#                     bot.send_document(message.chat.id, f, caption="üìπ VOD (—Ñ–∞–π–ª)")
#                 else:
#                     bot.send_video(message.chat.id, f, caption="üìπ VOD")
#         except Exception as e:
#             bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
#         finally:
#             os.remove(downloaded_file)
#     else:
#         bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å VOD.")

# ways_for_pay = {
#     "Boosty": {"url": "https://twitch-analitics-bot-web.vercel.app/"},
#     "Telegram-stars":{"url": "https://twitch-analitics-bot-web.vercel.app/"},
#     "–°–ë–ü":{"url": "https://twitch-analitics-bot-web.vercel.app/"},
# }
# for way in ways_for_pay:
#     print(ways_for_pay[way]["url"])
# print(type(ways_for_pay))

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == "support":
            message = "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –ø—Ä–æ–µ–∫—Ç, –≤—ã –ø–æ–ø–∞–¥–∞–µ—Ç–µ –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
            photo_donate = "https://lfb.su/assets/components/phpthumbof/cache/EP_9164.5829e9bb4bbfce8e8b20161f14bb89752225.png"
            ways_for_pay = {
                "Boosty": {"url": "https://twitch-analitics-bot-web.vercel.app/"},
                "Telegram-stars": {"url": "https://twitch-analitics-bot-web.vercel.app/"},
                "–°–ë–ü": {"url": "https://twitch-analitics-bot-web.vercel.app/"},
            }
            markup = InlineKeyboardMarkup()
            for way in ways_for_pay:
                btn = InlineKeyboardButton(way, url=ways_for_pay[way]['url'])
                markup.add(btn)
            bot.send_photo(call.message.chat.id, photo=photo_donate, caption=message, reply_markup=markup)


        elif call.data == "Boosty":
            bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Boosty")

        elif call.data == "Telegram-stars":
            bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Telegram-stars")

    bot.answer_callback_query(callback_query_id=call.id, text="–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")


@bot.message_handler(func=lambda message: True)
def handle_streamer_name(message):
    streamer = message.text.strip().replace(" ", "")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not streamer.isalnum() or len(streamer) > 25:
        bot.reply_to(message, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Å—Ç—Ä–∏–º–µ—Ä–∞ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∏–º–µ—Ä–µ
    streamer_data = get_streamer_info(username=streamer, TWITCH_CLIENT_ID=TWITCH_CLIENT_ID, TWITCH_ACCESS_TOKEN=TWITCH_ACCESS_TOKEN)
    if not streamer_data.get('data'):
        bot.reply_to(message, f"‚ùå –°—Ç—Ä–∏–º–µ—Ä —Å –∏–º–µ–Ω–µ–º '{streamer}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Twitch.")
        return

    user = streamer_data['data'][0]
    user_id = user['id']
    user_login = user['login']
    display_name = user['display_name']
    description = user["description"]
    was_created = format_twitch_date(user["created_at"])
    # view_count = f"{user['view_count']:,}".replace(',', ' ')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–Ω–ª–∞–π–Ω –ª–∏
    stream_data = get_stream_info(streamer_user_id= user_id, TWITCH_CLIENT_ID=TWITCH_CLIENT_ID, TWITCH_ACCESS_TOKEN=TWITCH_ACCESS_TOKEN)
    is_live = bool(stream_data.get('data'))

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π VOD
    vod = get_last_vod(user_id=user_id, TWITCH_CLIENT_ID=TWITCH_CLIENT_ID, TWITCH_ACCESS_TOKEN=TWITCH_ACCESS_TOKEN)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if is_live:
        stream = stream_data['data'][0]
        viewers = f"{stream['viewer_count']:,}".replace(",", " ")
        game = stream['game_name']
        title = stream['title']
        started_at = format_twitch_date(stream['started_at'])
        url = f"https://twitch.tv/{user_login}"



        reply = f"""
üìä <b>{display_name}</b> ‚Äî üî¥ –í —ç—Ñ–∏—Ä–µ

üéÆ –ò–≥—Ä–∞: <i>{game}</i>
üëÄ –ó—Ä–∏—Ç–µ–ª–µ–π: <b>{viewers}</b>
üìå –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{title}</code>
üïí –ù–∞—á–∞–ª–æ: {started_at}
üéÆ –°—Ç—Ä–∏–º: <a href='{url}'>–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Twitch</a>
   –ö–∞–Ω–∞–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω:{was_created}
        """
    else:
        reply = f"""
üìä <b>{display_name}</b> ‚Äî üü¢ –û—Ñ—Ñ–ª–∞–π–Ω

üìå <code>{description}</code>

    –ö–∞–Ω–∞–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω: {was_created}
        """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç
    if is_live:
        photo_url = user.get('profile_image_url')
    else:
        photo_url = user.get('offline_image_url')


    bot.send_photo(message.chat.id, photo_url, caption=reply, parse_mode='HTML') #, reply_markup=markup

    #support part

    # markup_support = InlineKeyboardMarkup()
    # btn = InlineKeyboardButton("–ü–û–ú–û–ì–ò –ü–†–û–ï–ö–¢–£", callback_data="support")
    # markup_support.add(btn)


    # –ï—Å–ª–∏ –µ—Å—Ç—å VOD ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å
    if vod:
        vod_id = vod['id']
        title = vod['title']
        duration = vod['duration']
        published = format_twitch_date(vod['published_at'])
        url = f"https://www.twitch.tv/videos/{vod_id}"
        view_counts = f"{vod['view_count']:,}".replace(",", " ")



        bot.send_message(
            message.chat.id,
            f"üü£ <b>–ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç—Ä–∏–º üë§ {display_name}</b>\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üéÆ <b>{title}</b>\n"
            f"üìÖ <i>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:</i> {published}\n"
            f"‚è± <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</i> {duration}\n"
            f"üëÅ <i>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</i> {view_counts}\n\n"
            f"üîó <a href='{url}'>üé¨ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Twitch</a>\n\n",
            # f"–•–æ—á–µ—à—å —Å–∫–∞—á–∞—Ç—å –µ–≥–æ? –ù–∞–ø–∏—à–∏: <code>/download {vod_id}</code>"
            parse_mode='HTML',
        )
    else:
        bot.send_message(message.chat.id, "üìå –£ —Å—Ç—Ä–∏–º–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å—Ç—Ä–∏–º–æ–≤.")

# print(get_streamer_info(username="whylollycry", TWITCH_CLIENT_ID=TWITCH_CLIENT_ID, TWITCH_ACCESS_TOKEN=TWITCH_ACCESS_TOKEN))
# print(get_last_vod(user_id=490666905, TWITCH_CLIENT_ID=TWITCH_CLIENT_ID, TWITCH_ACCESS_TOKEN=TWITCH_ACCESS_TOKEN))

bot.polling(none_stop=True)

