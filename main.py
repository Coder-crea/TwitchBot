import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import os
from Auxiliary_functions import get_twitch_token, format_twitch_date
from dotenv import load_dotenv
from Streamer import Streamer
from data_base import save_user_to_db

load_dotenv()


# TODO: –£–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
# FIXME: –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
# HACK: –ö–æ—Å—Ç—ã–ª—å, –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å


TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_CLIENT_SECRET = os.getenv("TWITCH_CLIENT_SECRET")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not all([TWITCH_CLIENT_ID, TWITCH_CLIENT_SECRET, TELEGRAM_BOT_TOKEN]):
    raise Exception("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ!")


# –ü–æ–ª—É—á–∞–µ–º Twitch —Ç–æ–∫–µ–Ω

try:
    TWITCH_ACCESS_TOKEN = get_twitch_token(TWITCH_CLIENT_ID=TWITCH_CLIENT_ID, TWITCH_CLIENT_SECRET=TWITCH_CLIENT_SECRET)
    print("Twitch access token –ø–æ–ª—É—á–µ–Ω")
except Exception as e:
    print(e)
    exit()


#–°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
popular_streamers = ["Buster", "Evelone2004", "Anar Abdullaev", "Enzzai", "Whylollycry", "StRoGo"]


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user = message.from_user
    save_user_to_db(user)
    markup = ReplyKeyboardMarkup(row_width=6)
    for streamer in popular_streamers:
        button = KeyboardButton(streamer)
        markup.add(button)
    bot.reply_to(message, """
üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Twitch Analytics Bot!</b>
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ Twitch:
üìå –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏–º—è —Å—Ç—Ä–∏–º–µ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
   <code>Evelone2004</code>
    """, parse_mode='HTML', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == "support":
            message = "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –ø—Ä–æ–µ–∫—Ç, –≤—ã –ø–æ–ø–∞–¥–∞–µ—Ç–µ –≤ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
            photo_donate = "https://lfb.su/assets/components/phpthumbof/cache/EP_9164.5829e9bb4bbfce8e8b20161f14bb89752225.png"
            ways_for_pay = {
                "Boosty": {"url": "https://twitch-analitics-bot-web.vercel.app/"},
                "Telegram-stars": {"url": "https://twitch-analitics-bot-web.vercel.app/"},
                "–°–ë–ü": {"url": "https://twitch-analitics-bot-web.vercel.app/"},
            }
            markup = InlineKeyboardMarkup()
            for way in ways_for_pay:
                btn = InlineKeyboardButton(way, url=ways_for_pay[way]['url'])
                markup.add(btn)
            bot.send_photo(call.message.chat.id, photo=photo_donate, caption=message, reply_markup=markup)


        elif call.data == "Boosty":
            bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Boosty")

        elif call.data == "Telegram-stars":
            bot.send_message(call.message.chat.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Telegram-stars")

    bot.answer_callback_query(callback_query_id=call.id, text="–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")




@bot.message_handler(func=lambda message: True)
def handle_streamer_name(message):
    streamer_name = message.text.strip().replace(" ", "")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not streamer_name.isalnum() or len(streamer_name) > 25:
        bot.reply_to(message, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —Å—Ç—Ä–∏–º–µ—Ä–∞ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –¥–æ 25 —Å–∏–º–≤–æ–ª–æ–≤).")
        return

    STREAMER = Streamer(streamer_name)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∏–º–µ—Ä–µ
    streamer_data = STREAMER.get_streamer_info(streamer_name=streamer_name, TWITCH_CLIENT_ID=TWITCH_CLIENT_ID, TWITCH_ACCESS_TOKEN=TWITCH_ACCESS_TOKEN)

    if not streamer_data.get('data'):
        bot.reply_to(message, f"‚ùå –°—Ç—Ä–∏–º–µ—Ä —Å –∏–º–µ–Ω–µ–º '{streamer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ Twitch.")
        return


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–Ω–ª–∞–π–Ω –ª–∏
    stream_data = STREAMER.get_stream_info(streamer_id= STREAMER.streamer_id, TWITCH_CLIENT_ID=TWITCH_CLIENT_ID, TWITCH_ACCESS_TOKEN=TWITCH_ACCESS_TOKEN)
    is_live = bool(stream_data.get('data'))


    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if is_live:

        reply = f"""
üìä <b>{STREAMER.streamer_display_name}</b> ‚Äî üî¥ –í —ç—Ñ–∏—Ä–µ

üéÆ –ò–≥—Ä–∞: <i>{STREAMER.stream["game"]}</i>
üëÄ –ó—Ä–∏—Ç–µ–ª–µ–π: <b>{STREAMER.stream["viewers"]}</b>
üìå –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{STREAMER.stream["title"]}</code>
üïí –ù–∞—á–∞–ª–æ: {STREAMER.stream["started_at"]}
üéÆ –°—Ç—Ä–∏–º: <a href='{STREAMER.stream["url"]}'>–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Twitch</a>
   –ö–∞–Ω–∞–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω:{STREAMER.streamer_was_created}
        """
    else:
        reply = f"""
üìä <b>{STREAMER.streamer_display_name}</b> ‚Äî üü¢ –û—Ñ—Ñ–ª–∞–π–Ω

üìå <code>{STREAMER.streamer_description}</code>

    –ö–∞–Ω–∞–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω: {STREAMER.streamer_was_created}
        """



    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + —Ç–µ–∫—Å—Ç
    if is_live and STREAMER.photo_online != "Error image":
        try:
            bot.send_photo(message.chat.id, STREAMER.photo_online, caption=reply, parse_mode='HTML')
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

    elif not is_live and STREAMER.photo_offline != "Error image":
        try:
            bot.send_photo(message.chat.id, STREAMER.photo_offline, caption=reply, parse_mode='HTML')
        except  Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

    else:
        try:
            bot.send_message(message.chat.id, reply, parse_mode="HTML")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")



    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π VOD
    vod = STREAMER.get_last_vod( streamer_id=STREAMER.streamer_id, TWITCH_CLIENT_ID=TWITCH_CLIENT_ID, TWITCH_ACCESS_TOKEN=TWITCH_ACCESS_TOKEN)



    # –ï—Å–ª–∏ –µ—Å—Ç—å VOD ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–∞—á–∞—Ç—å
    if vod:
        bot.send_message(
            message.chat.id,
            f"üü£ <b>–ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç—Ä–∏–º <i>{STREAMER.streamer_display_name}</i></b>\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üéÆ <b>{STREAMER.last_vod['title']}</b>\n"
            f"üìÖ <i>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:</i> {STREAMER.last_vod['published']}\n"
            f"‚è± <i>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</i> {STREAMER.last_vod['duration']}\n"
            f"üëÅ <i>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:</i> {STREAMER.last_vod['view_counts']}\n\n"
            f"üîó <a href='{STREAMER.last_vod["url"]}'>üé¨ –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Twitch</a>\n\n",
            # f"–•–æ—á–µ—à—å —Å–∫–∞—á–∞—Ç—å –µ–≥–æ? –ù–∞–ø–∏—à–∏: <code>/download {vod_id}</code>"
            parse_mode='HTML',
        )
    else:
        bot.send_message(message.chat.id, "üìå –£ —Å—Ç—Ä–∏–º–µ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å—Ç—Ä–∏–º–æ–≤.")


bot.polling(none_stop=True)
# if __name__ == "__main__":
#     bot.remove_webhook()
#     if os.getenv("ENV") == "production":
#         url =os.getenv("NETWORK")
#         bot.set_webhook(url= url)
#     else:
#         bot.polling(none_stop=True)

